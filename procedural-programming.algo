// procedure dotproduct
PROCEDURE dot_product(v1,v2)
VAR
    v1 : ARRAY_OF INTEGER[50];
    v2 : ARRAY_OF INTEGER[50];
    ps : INTEGER:=0;
    i : INTEGER;
BEGIN
    FOR i FROM 0 TO v1.length-1 STEP 1 DO
        ps:=ps+(v1[i]*v2[i]);
    END_FOR
    IF (ps=0) THEN
            Write("the vectors are orthogonal");
        ELSE
            Write("the vectors are not orthogonal");
    END_IF
END
// function dotproduct
FUNCTION dot_product(v1,v2) : INTEGER
VAR
    ps : INTEGER:=0;
    i : INTEGER;
BEGIN
    FOR i FROM 0 TO v1.length-1 STEP 1 DO
        ps:=ps+(v1[i]*v2[i]);
    END_FOR
    RETURN ps;
END
// algorithm with procedure
ALGORITHM isorthogonal
VAR
    o_1,o_2 : ARRAY_OF integer[50];
    j:INTEGER;
BEGIN
    Write("enter the first vector coordinates");
    Read(o_1);
    Write("enter the second vector coordinates");
    Read(o_2);
    dot_product(o_1,o_2);
END
// algorithm with function
ALGORITHM isorthogonal
VAR
    o_1,o_2 : ARRAY_OF integer[50];
    result : INTEGER;
BEGIN
    write("input first vector coordinates");
    Read(o_1);
    write("input second vector coordinates");
    Read(o_2);
    result:=dot_product(o_1,o_2)
    IF (result=0) THEN
        Write("the vectors are orthogonal");
    ELSE
        Write("the vectors are not orthogonal");
    END_IF
END
